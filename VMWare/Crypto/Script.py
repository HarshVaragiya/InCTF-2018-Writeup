#!/usr/bin/env python2.7
from Crypto.Util.number import GCD, bytes_to_long, long_to_bytes
import gmpy2
 
def crt(list_a, list_m):
    try:
        assert len(list_a) == len(list_m)
    except:
        print "[+] Length of list_a should be equal to length of list_m"
        return -1
    for i in range(len(list_m)):
        for j in range(len(list_m)):
            if GCD(list_m[i], list_m[j])!= 1 and i!=j:
                print "[+] Moduli should be pairwise co-prime"
                return -1
    M = 1
    for i in list_m:
        M *= i
    list_b = [M/i for i in list_m]
    assert len(list_b) == len(list_m)
    try:
        list_b_inv = [int(gmpy2.invert(list_b[i], list_m[i])) for i in range(len(list_m))]
    except:
        print "[+] Encountered an unusual error while calculating inverse using gmpy2.invert()"
        return -1
    x = 0
    for i in range(len(list_m)):
        x += list_a[i]*list_b[i]*list_b_inv[i]
    return x % M
 
def hastad_unpadded(ct_list, mod_list, e):
    """
    Implementing Hastad's Broadcast Attack
    """
    m_expo = crt(ct_list, mod_list)
    if m_expo != -1:
        eth_root = gmpy2.iroot(m_expo, e)
        if eth_root[1] == False:
            return -1
        elif eth_root[1] == True:
            print long_to_bytes(eth_root[0])
    else:
        print "[+] Cannot calculate CRT"
        return -1
 
 
c1_flag = 123123310817528819868229015381019446692546105767982550923486034324830199609440792436972231447821942594685666912718722955254794868552390122894695991322054161090355252347471252047310340267551348802090046574455590445810816719802970815982344372733151460854909591646662286854823029974286674237790765626119517172973
c2_flag = 122472133154122154054507894224681969390870489782444639793953120744267175502210732378501198055144877524025889941099530951189487063837979513143769429082969523868726145809805757041907265536374618475932151436281370408545129364896336577380535430640360312898755522732481565131794301971545453051842840162727188656820
c3_flag = 96070338708173906879038040784336731429964562608340473965471470924661848095237498039872724555127515523723512497202881926901135980449930716285871595390699710922975986248482270274213406406550619474118868475844479334084167326511187512320924189195432828251945058538934219364324303620261161325122247924323012003734
 
c1 = 50673530617543676473652168466737367750036743581653055284732386963869082398907278557386659042062559290604348178207909902368035055314773101615797087756780298055827012944046332185866813645806937918426263709794173025793635953567585268901419756464111936370856332563678803620009829795575756876661083042747836634095
c2 = 57916793209937128832871797834968309428714348707349692778692646206206128912458532512199548897812577446065680929446654052148191522082051662640361212553099594183788853095046062069215469976225991313434312609625274064727711599450216318048389672754323280476106410750897036854826727724602646111849181156878646744045
 
n1 = 146840404723300632508509336481402865964456860404249759188918371409735638985263209727579350482449923655183407110141836621617349257296993687689120790049885509319193503408872683176563956139775198628235514685139120883488287555765191106774119256995033845043498462813661978840183987261333519025184841662283327506129
n2 = 130107674285678587794769046704823116680811590808371644163329903740168937535053441275789045887658508936658794520603590272568668144375222468506474087234136848712597040548661965817307510295643338763756251142403595465760207438569786394543419384566770656540541557374418120303908311569193209887212382915967190829451
 
m1 = bytes_to_long('Best of luck for this challenge you will definitely need it')
m2 = bytes_to_long('Try harder, if you have trouble just google!!!')
 
n31 = m1**3 - c1
n32 = m2**3 - c2
n3 = gmpy2.gcd(n31,n32)
 
ct_arr = [c1_flag,c2_flag,c3_flag]
n_arr = [n1,n2,n3]
e = 3
 
hastad_unpadded(ct_arr,n_arr,3)
